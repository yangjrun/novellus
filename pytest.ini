[pytest]
# Test discovery and collection
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --html=reports/pytest_report.html
    --self-contained-html
    --junitxml=reports/junit.xml

# Test markers
markers =
    unit: Unit tests - isolated component testing
    integration: Integration tests - multiple components
    e2e: End-to-end tests - full application workflow
    performance: Performance and load tests
    slow: Tests that take more than 5 seconds
    database: Tests requiring database connection
    api: API endpoint tests
    auth: Authentication and authorization tests
    cache: Cache-related tests
    mock: Tests using mocks/patches
    smoke: Basic smoke tests for CI/CD
    regression: Regression tests for bug fixes
    security: Security-related tests

# Async testing
asyncio_mode = auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Minimum version
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Performance monitoring
benchmark-only = false
benchmark-warmup = true
benchmark-warmup-iterations = 3
benchmark-min-rounds = 5

# Parallel execution settings
# Use -n auto to auto-detect CPU cores or -n <number>
# Can be overridden with pytest -n 4

# Coverage settings
cov-config = .coveragerc

# Filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*coroutine.*was never awaited:RuntimeWarning