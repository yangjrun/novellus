[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "novellus-mcp-server"
version = "0.1.0"
description = "A Model Control Protocol (MCP) server implementation using FastMCP"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["mcp", "model-control-protocol", "server"]
authors = [
    {name = "Novellus Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "mcp[cli]>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.0",
    "python-dotenv>=1.0.0",
    "motor>=3.3.0",
    "pymongo>=4.6.0",
    "anthropic>=0.68.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.3.0",
    "pytest-html>=4.1.0",
    "black",
    "isort",
    "flake8",
]
test = [
    "httpx>=0.25.0",
    "pytest-benchmark>=4.0.0",
    "faker>=20.1.0",
    "factory-boy>=3.3.0",
    "locust>=2.17.0",
    "aioredis>=2.0.0",
    "requests>=2.31.0",
]
performance = [
    "locust>=2.17.0",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/novellus/mcp-server"
Repository = "https://github.com/novellus/mcp-server"
Issues = "https://github.com/novellus/mcp-server/issues"

[project.scripts]
novellus-mcp-server = "src.mcp_server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | tests/fixtures
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/.venv/*", "**/venv/*", "**/node_modules/*"]
known_first_party = ["src", "tests"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "pytest"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--html=reports/report.html",
    "--self-contained-html"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "database: Tests requiring database",
    "api: API endpoint tests",
]
minversion = "6.0"
asyncio_mode = "auto"
testmon = true
log_cli = true
log_cli_level = "INFO"
