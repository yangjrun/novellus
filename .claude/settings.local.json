{
  "permissions": {
    "allow": [
      "WebSearch",
      "Read(//c/Users/jirun_yang/AppData/Roaming/Claude/**)",
      "Bash(tree:*)",
      "Bash(dir /s)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Read(//c/Users/jirun_yang/**)",
      "mcp__exa__web_search_exa",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__inner-monologue__inner-monologue",
      "Bash(dir)",
      "Bash(ren:*)",
      "Bash(touch:*)",
      "Bash(npm run dev:*)",
      "Bash(dir:*)",
      "mcp__chakra-ui__installation",
      "Bash(npm i:*)",
      "Bash(pnpm add:*)",
      "mcp__chakra-ui__get_component_example",
      "Bash(pnpm run:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(xargs sed:*)",
      "mcp__chakra-ui__get_theme",
      "mcp__chakra-ui__list_components",
      "mcp__chakra-ui__get_component_props",
      "mcp__chakra-ui__v2_to_v3_code_review",
      "mcp__ide__getDiagnostics",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(tasklist:*)",
      "Bash(powershell:*)",
      "Bash(wmic:*)",
      "Bash(taskkill:*)",
      "Bash(npm run type-check:*)",
      "Bash(sed:*)",
      "Bash(git add:*)",
      "Bash(python test:*)",
      "Bash(python:*)",
      "mcp__context7__get-library-docs",
      "Bash(uv run:*)",
      "Bash(del check_tables.py complete_database_init.py)",
      "Bash(cat:*)",
      "Bash(pip3 install:*)",
      "Bash(pip install:*)",
      "Bash(.venvScriptsactivate)",
      "Bash(\".venv\\Scripts\\activate.bat\")",
      "Bash(\".venv\\Scripts\\python.exe\" -m pip install jieba opencc-python-reimplemented)",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -c \"import jieba; print(''jieba OK'')\")",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" test_nine_domains_processor.py)",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m pip install asyncpg psycopg2-binary python-dotenv motor pymongo)",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m pip install pydantic)",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m pip install opencc-python-reimplemented)",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -c \"from opencc import OpenCC; print(''OpenCC OK'')\")",
      "Bash(\"C:\\Users\\jirun_yang\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m pip install spacy)",
      "Bash(docker-compose up:*)",
      "Bash(docker-compose:*)",
      "Bash(docker volume rm:*)",
      "Bash(timeout:*)",
      "Bash(docker ps:*)",
      "Bash(docker exec:*)",
      "Bash(docker logs:*)",
      "Bash(pg_isready:*)",
      "Bash(python3:*)",
      "Bash(docker cp:*)",
      "Bash(time docker exec:*)",
      "Bash(chmod:*)",
      "Bash(uv sync:*)",
      "Bash(PYTHONPATH=H:novellussrc python -c \"from api.main import app; print(''FastAPI应用导入成功'')\")",
      "Bash(source:*)",
      "Bash(find:*)",
      "Bash(\"C:\\Users\\yangjrun\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -m pip install pydantic-settings)",
      "Bash(.venvScriptspython.exe -m pip install pydantic-settings)",
      "Bash(\".venv\\Scripts\\python.exe\" -m pip install pydantic-settings)",
      "Bash(uv add:*)",
      "Bash(telnet:*)",
      "Bash(docker:*)",
      "Read(//h/**)",
      "Bash(git commit:*)",
      "Bash(rm:*)",
      "Bash(grep:*)",
      "Bash(for file in *REPORT*.md *ANALYSIS*.md EXECUTIVE_SUMMARY.md)",
      "Bash(do [ -f \"$file\" ])",
      "Bash(done)"
    ],
    "deny": [],
    "ask": []
  },
  "mcpServers": {
    "sequential-thinking": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ]
    },
    "fetch": {
      "command": "python3",
      "args": [
        "-m",
        "mcp_server_fetch"
      ]
    },
    "inner-monologue": {
      "command": "npx",
      "args": [
        "inner-monologue-mcp"
      ]
    },
    "exa": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-remote",
        "https://mcp.exa.ai/mcp?exaApiKey=bf5c0cb7-bae0-4a2e-b12e-c9880188d2b9"
      ]
    }
  }
}